[{"F:\\html\\hs-bg-tracker\\src\\index.tsx":"1","F:\\html\\hs-bg-tracker\\src\\components\\App.tsx":"2","F:\\html\\hs-bg-tracker\\src\\helpers\\constants.ts":"3","F:\\html\\hs-bg-tracker\\src\\helpers\\functions.ts":"4","F:\\html\\hs-bg-tracker\\src\\helpers\\api.ts":"5","F:\\html\\hs-bg-tracker\\src\\request\\client.tsx":"6","F:\\html\\hs-bg-tracker\\src\\components\\Body.tsx":"7","F:\\html\\hs-bg-tracker\\src\\helpers\\loadingContext.tsx":"8","F:\\html\\hs-bg-tracker\\src\\components\\Loader\\index.tsx":"9","F:\\html\\hs-bg-tracker\\src\\components\\Card.tsx":"10","F:\\html\\hs-bg-tracker\\src\\components\\Inputs\\Switch.tsx":"11"},{"size":431,"mtime":1623511622933,"results":"12","hashOfConfig":"13"},{"size":1586,"mtime":1631154084370,"results":"14","hashOfConfig":"13"},{"size":44,"mtime":1622143761527,"results":"15","hashOfConfig":"16"},{"size":1394,"mtime":1622147508709,"results":"17","hashOfConfig":"16"},{"size":710,"mtime":1623508259603,"results":"18","hashOfConfig":"13"},{"size":1856,"mtime":1623511799920,"results":"19","hashOfConfig":"13"},{"size":4497,"mtime":1631155659801,"results":"20","hashOfConfig":"13"},{"size":747,"mtime":1623512282157,"results":"21","hashOfConfig":"13"},{"size":542,"mtime":1623512244805,"results":"22","hashOfConfig":"13"},{"size":1756,"mtime":1631154290437,"results":"23","hashOfConfig":"13"},{"size":1507,"mtime":1631151410974,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1h5k10b",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19y1cdj",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\html\\hs-bg-tracker\\src\\index.tsx",[],["49","50"],"F:\\html\\hs-bg-tracker\\src\\components\\App.tsx",[],"F:\\html\\hs-bg-tracker\\src\\helpers\\constants.ts",[],"F:\\html\\hs-bg-tracker\\src\\helpers\\functions.ts",[],"F:\\html\\hs-bg-tracker\\src\\helpers\\api.ts",[],"F:\\html\\hs-bg-tracker\\src\\request\\client.tsx",[],"F:\\html\\hs-bg-tracker\\src\\components\\Body.tsx",["51","52"],"import { useEffect, useState } from \"react\";\r\nimport tw, { styled } from \"twin.macro\";\r\nimport { BodyStatusInterface, StatusInfo } from \"../types/interfaces\";\r\nimport { useLoading } from \"../helpers/loadingContext\";\r\nimport Card from \"./Card\";\r\nimport { FilterType } from \"../types/types\";\r\nimport Switch from \"./Inputs/Switch\";\r\nimport Loader from \"./Loader\";\r\nimport { statusLocalUri } from \"../helpers/api\";\r\n\r\nconst buttons: FilterType[] = [\"winners\", \"others\", \"all\"];\r\nconst title = {\r\n  winners: \"Winners\",\r\n  others: \"Left\",\r\n  all: \"All heroes\",\r\n};\r\nconst sizes = tw`w-[40px] h-[40px] p-0`;\r\n\r\nconst BodyWrap = styled.div([tw`w-full h-full overflow-hidden`]);\r\nconst ScrollWrap = styled.div([\r\n  tw`my-[10px] overflow-y-scroll h-[calc(100vh - 92px)] relative mr-[3px] py-[10px]`,\r\n]);\r\nconst HeroesGrid = styled.div([\r\n  tw`w-[1200px] mx-auto grid grid-cols-4 gap-y-[30px] transition-all duration-150 ease-in`,\r\n]);\r\nconst Header = styled.div([tw`w-full h-[72px] bg-[#121519] items-center flex`]);\r\nconst HeaderContent = styled.div(\r\n  tw`flex justify-between items-center mx-auto w-[1200px]`\r\n);\r\nconst TitleBlock = styled.div([\r\n  tw`flex items-center h-full`,\r\n  {\r\n    \"& > button:first-of-type\": tw`mr-[15px]`,\r\n  },\r\n]);\r\nconst ButtonsBlock = styled.div([\r\n  tw`grid grid-cols-3 w-[150px] h-full items-center ml-auto`,\r\n]);\r\nconst Button = styled.button(({ isActive }: { isActive?: boolean }) => [\r\n  sizes,\r\n  tw`border-none rounded-[5px] cursor-pointer focus:outline-none transition-all duration-150 ease-in bg-mediumgray`,\r\n  {\r\n    \"& > img\": { ...tw`w-5/6 h-5/6`, filter: \"invert(0.9)\" },\r\n  },\r\n  isActive && tw`bg-green`,\r\n]);\r\n\r\nconst showCard = (id: number, filter: FilterType, status: StatusInfo) => {\r\n  switch (filter) {\r\n    case \"winners\":\r\n      return status[id] === true;\r\n\r\n    case \"others\":\r\n      return status[id] !== true;\r\n\r\n    default:\r\n      return true;\r\n  }\r\n};\r\n\r\nexport default function Body({\r\n  heroes,\r\n  wr,\r\n  status,\r\n  handleStatus,\r\n}: BodyStatusInterface) {\r\n  const { loading, handleLoading } = useLoading();\r\n  const [checked, handleChecked] = useState(false);\r\n  const [filter, handleFilter] = useState<FilterType>(\"others\");\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      handleLoading(false);\r\n    }\r\n  }, [loading]);\r\n  console.log(\"wr: \", wr, heroes, status);\r\n\r\n  const cards = heroes.map((props, i) => {\r\n    const show = showCard(props.id, filter, status);\r\n    const onClick = () => {\r\n      if (!checked) return false;\r\n      handleLoading(true);\r\n\r\n      fetch(statusLocalUri, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          hero_id: props.id,\r\n          victory: filter === \"winners\" ? false : true,\r\n        }),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          const newStatus = { ...status };\r\n          if (filter === \"winners\") {\r\n            delete newStatus[props.id];\r\n          } else {\r\n            newStatus[props.id] = true;\r\n          }\r\n          handleStatus(newStatus);\r\n          handleLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"error: \", err.message);\r\n          handleLoading(false);\r\n        });\r\n    };\r\n    return (\r\n      <Card\r\n        key={props.id}\r\n        {...props}\r\n        hidden={!show}\r\n        editMode={checked}\r\n        showAnim={i % 3 === 1}\r\n        onClick={onClick}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <BodyWrap>\r\n      <Header>\r\n        <HeaderContent>\r\n          <TitleBlock>\r\n            <Switch checked={checked} handleChecked={handleChecked} />\r\n          </TitleBlock>\r\n          <h1>\r\n            {title[filter]} (\r\n            {heroes.filter(({ id }) => showCard(id, filter, status)).length}{\" \"}\r\n            hero)\r\n          </h1>\r\n          <ButtonsBlock>\r\n            {buttons.map((type) => (\r\n              <Button\r\n                key={type}\r\n                onClick={() => handleFilter(type)}\r\n                isActive={type === filter}\r\n              >\r\n                <img\r\n                  src={require(`../assets/svg/${type}.svg?inline`).default}\r\n                />\r\n              </Button>\r\n            ))}\r\n          </ButtonsBlock>\r\n        </HeaderContent>\r\n      </Header>\r\n      <ScrollWrap>\r\n        {loading && (\r\n          <div>\r\n            <Loader />\r\n          </div>\r\n        )}\r\n        <HeroesGrid>{cards}</HeroesGrid>\r\n      </ScrollWrap>\r\n    </BodyWrap>\r\n  );\r\n}\r\n","F:\\html\\hs-bg-tracker\\src\\helpers\\loadingContext.tsx",[],"F:\\html\\hs-bg-tracker\\src\\components\\Loader\\index.tsx",[],"F:\\html\\hs-bg-tracker\\src\\components\\Card.tsx",[],"F:\\html\\hs-bg-tracker\\src\\components\\Inputs\\Switch.tsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":75,"column":6,"nodeType":"59","endLine":75,"endColumn":15,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":141,"column":17,"nodeType":"63","endLine":143,"endColumn":19},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleLoading'. Either include it or remove the dependency array.","ArrayExpression",["66"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [handleLoading, loading]",{"range":"69","text":"70"},[2270,2279],"[handleLoading, loading]"]